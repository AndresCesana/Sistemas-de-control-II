%% Sistemas de Control II 
% Alumno: Andres Agustin Cesana
% Tarea N° 2 - ITEM 3 - 

m  = 0.1;
m_ = m*10;
F  = 0.1;
l  = 1.6;
g  = 9.8;
M  = 1.5;

% Variables de estado
% x1 = (delta - desp), x2 = delta_p, x3 = (phi - áng), x4 = phi_p
% Salidas
% y1 = delta, y2 = phi
% Entradas
% u1 = u

% Matriz de estados
% RECORRIDO DE 0 A 10: considera m
Ac = [0       1               0        0;  
      0    -F/M            -m*g/M      0;  
      0       0               0        1;  
      0   -F/(l*M)     -g*(m+M)/(l*M)  0];

% RECORRIDO DE 10 A 0: considera m_
Ac_ = [0       1             0         0;           
       0    -F/M         -m_*g/M       0;              
       0       0             0         1;               
       0   -F/(l*M)  -g*(m_+M)/(l*M)   0];
   
% Matriz de entrada 
Bc = [   0   ;
        1/M  ;
         0   ;
      1/(l*M)]; 
  
% Matriz de salida - desplazamiento y ángulo
% y1 = wr
% y2 = theta
% Se toman estas salidas ya que son las variables de estado que se pueden 
% medir
Cc = [1 0 0 0;
      0 0 1 0];  
  
% Matriz de transmisión directa.  
Dc = [0; 
      0];            
sysCont  = ss(Ac,Bc,Cc,Dc);         % m
sysCont_ = ss(Ac_,Bc,Cc,Dc);        % m_
val = real(eig(Ac));

% Dinámica rápida
tR   = log(0.95)/val(2); 
tInt = tR/4;            % tiempo de integración máximo 

% Dinámica lenta
tL   = log(0.05)/val(3); 
tsim = tL*5;            % tiempo de simulación mínimo

Ts      = 1e-2;         % Tiempo de muestreo

sysDisc = c2d(sysCont, Ts, 'zoh');
Ad     = sysDisc.a;     % matriz de estados
Bd     = sysDisc.b;     % matriz de entrada 
Cd     = sysDisc.c;     % matriz de salida
Dd     = sysDisc.d;     % matriz de acoplamiento directo

sysDisc_ = c2d(sysCont_, Ts, 'zoh');
Ad_     = sysDisc_.a;     % matriz de estados
Bd_     = sysDisc_.b;     % matriz de entrada 
Cd_     = sysDisc_.c;     % matriz de salida
Dd_     = sysDisc_.d;     % matriz de acoplamiento directo


% PARA m
% Controlabilidad
Mc = [Bd Ad*Bd Ad^2*Bd Ad^3*Bd Ad^4*Bd]; 
controlabilidad = rank(Mc); 

% Alcanzabilidad
Ma = [Bd Ad*Bd Ad^2*Bd Ad^3*Bd]; 
alcanzabilidad = rank(Ma);

% PARA m_
% Controlabilidad
Mc_ = [Bd_ Ad_*Bd_ Ad_^2*Bd_ Ad_^3*Bd_ Ad_^4*Bd_]; 
controlabilidad_ = rank(Mc_); 

% Alcanzabilidad
Ma_ = [Bd_ Ad_*Bd_ Ad_^2*Bd_ Ad_^3*Bd_]; 
alcanzabilidad_ = rank(Ma_);

Aa = [Ad , zeros(4,1) ; -Cd(1,:)*Ad, eye(1)];
Ba = [Bd; -Cd(1,:)*Bd];

Aa_ = [Ad_ , zeros(4,1) ; -Cd_(1,:)*Ad_, eye(1)];
Ba_ = [Bd_; -Cd_(1,:)*Bd_];

% CÁLCULO LQR1 - Trayectoria de 0 a 10 m
d1 = [1 50 500 .1 .0003]; %[0.1 0.2 200 0.02 0.00001];          % elementos de la diagonal: (delta, delta_p, phi, phi_p, ei)       
Q1 = diag(d1);
R1 = 1; %0.1; 

% Cálculo del controlador
[Klqr, ~, ~] = dlqr(Aa, Ba, Q1, R1); 
K  = Klqr(1:4);     % Ganancia para los estados originales
Ki = -Klqr(5);      % Ganancia para el integrador

d2 = [10 50 90 .01 .00045]; %[1 0.2 10 0.002 0.00001];            % elementos de la diagonal: (delta, delta_p, phi, phi_p, ei)       
Q2 = diag(d2);
R2 = .1; %0.01; 

% Cálculo del controlador
[Klqr_, ~, ~] = dlqr(Aa_, Ba_, Q2, R2); 
K_  = Klqr_(1:4);     % Ganancia para los estados originales
Ki_ = -Klqr_(5);      % Ganancia para el integrador

%Aplicacion de dualidad
% PARA m
Ao = Ad';
Bo = Cd';       
Co = Bd';

% PARA m_
Ao_ = Ad_';
Bo_ = Cd_';       
Co_ = Bd_';

Determinación de matrices Qo y Ro 

% PARA m
do = 100*[1 50 500 .1]; %[1, 0.1, 1, 0.1]; 
Qo = diag(do); 
Ro = diag([.01 .01]); %[0.001 0.001]
   
% Cálculo del controlador del sistema dual (m)
Ko = (dlqr(Ao,Bo,Qo,Ro))';

do_ = 100*[10 50 90 .1]; %[1, 0.01, 1, 0.01]
Qo_ = diag(do_); 
Ro_ = diag([.001 .001]); %[0.001 0.001]
   
% Cálculo del controlador del sistema dual (m_)
Ko_ = (dlqr(Ao_,Bo_,Qo,Ro))';

% PASO VIII: VERIFICACIÓN.

%dT    = 1e-4;            % tiempo de integración de Euler
Tsim  = 20;              % tiempo de simulación
p_max = floor(Tsim/Ts);  % cantidad de puntos a simular.

% Condiciones iniciales
phiIn  = pi;            % ángulo inicial del péndulo
posRef = 10;            % referencia de posición a donde se quiere desplazar el carro           

% Cond iniciales VE
d(1)     = 0;
d_p(1)   = 0;
phi(1)   = phiIn;
phi_p(1) = 0;
phi_pp(1) = 0;

x   = [d(1) d_p(1) phi(1) phi_p(1)]';     % estado
xop = [0 0 pi 0]';                        % pto de operación

h = Ts/20;
u = [];                                   % vector acc de control (auxiliar)

ref   = 10;                               % posición de referencia inicial
flag  = 0;

ei(1) = 0;
x_hat = [0 0 pi 0]';

% Definición de zona muerta
deathZone = 0.5;
t = 0:h:Tsim;
refAng = phiIn*ones(size(t));

K_c  = K;       % controlador K
Ki_c = Ki;      % constante de error Ki
Ko_c = Ko;      % observador Ko
m_c  = m;       % masa a transportar por el carro
A    = Ad;      % matriz de estados A
B    = Bd;      % matriz de entrada B

i    = 1;
for ki=1:p_max
    
    % Salida de dos componentes
    y_out   = Cd*x;             % salida del sistema
    y_out_o = Cd*(x_hat+xop);   % salida del observador
   
    ei(ki+1)= ei(ki)+ref-y_out(1);
    
    %Ley de control
    %u1(ki) = -K_c*(x - xop) + Ki_c*ei(ki+1);          % sin observador
    u1(ki)  = -K_c*(x_hat - xop) + Ki_c*ei(ki+1);     % con observador
    
    % Zona Muerta
    if(abs(u1(ki)) < deathZone)
        u1(ki) = 0;               
    else
        u1(ki) = sign(u1(ki))*(abs(u1(ki)) - deathZone);
    end
    
    
    % Integraciones de Euler por paso de simulación
    for kii=1:Ts/h
        
        u(i) = u1(ki);
        
        % Cálculo por sistema no lineal
        d_pp       = (1/(M+m_c))*(u(i) - m_c*l*phi_pp*cos(phi(i)) + m_c*l*phi_p(i)^2*sin(phi(i)) - F*d_p(i));
        phi_pp     = (1/l)*(g*sin(phi(i)) - d_pp*cos(phi(i)));
        d_p(i+1)   = d_p(i) + h*d_pp;
        d(i+1)     = d(i) + h*d_p(i);
        phi_p(i+1) = phi_p(i) + h*phi_pp;
        phi(i+1)   = phi(i) + h*phi_p(i);
        
        % Cambia de sistema una vez que alcanza los 10[m]
        % Se tiene que actualizar:
        % - la referencia de posición
        % - la masa transportada
        % - el controlador K
        % - la constante de error Ki
        % - el observador Ko
        % - las matrices A y B ya que cambian a causa de el cambio en la
        % masa
        if(d(i) >= 9.99)
            if(flag == 0)
                ref  = 0;
                m_c  = m_;
                flag = 1;
                K_c  = K_;
                Ki_c = Ki_;
                Ko_c = Ko_;
                A    = Ad_;
                B    = Bd_;
            end
        end
        i=i+1;
    end
    
    % Actualización de los estados
    % Estados del sistema
    x     = [d(i-1) d_p(i-1) phi(i-1) phi_p(i-1)]';   
    % Estados estimados por el observador
    x_hat = A*x_hat + B*u1(ki) + Ko_c*(y_out - y_out_o) + xop;
end

u(i) = u1(ki);

figure(1);
subplot(3,2,1); grid on; hold on;
plot(t,phi_p,color,'LineWidth',1.5);grid on; title('Velocidad angular \phi_p');

subplot(3,2,2); grid on; hold on;
plot(t,phi,color,'LineWidth',1.5); title('Ángulo \phi');xlabel('Tiempo');
plot(t,refAng,'red','LineWidth',1.5);

subplot(3,2,3); grid on; hold on;
plot(t,d,color,'LineWidth',1.5);title('Posición grúa \delta');xlabel('Tiempo');

subplot(3,2,4); grid on; hold on;
plot(t,d_p,color,'LineWidth',1.5);title('Velocidad de grúa \delta_p');

subplot(3,1,3); grid on; hold on;
plot(t,u,color,'LineWidth',1.5);title('Acción de control u');xlabel('Tiempo en Seg.');
 
figure(2);
subplot(2,1,1);grid on; hold on;
plot(phi,phi_p,color,'LineWidth',1.5);
title('Ángulo vs Velocidad angular');
xlabel('Ángulo');ylabel('Velocidad angular');
 
subplot(2,1,2);grid on; hold on;
plot(d,d_p,color,'LineWidth',1.5);
title('Distancia vs velocidad');
xlabel('Distancia');ylabel('Velocidad');
   
   
